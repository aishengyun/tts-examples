import os
import sys
import uuid
import json
import base64
import httpx
import argparse


sample_rate = 24000
# copy it from embedding api's output if you wanna use embedding mode, the embedding is 192 dimension
embedding = None 
# Cantonese
# embedding = [0.5092662572860718, 0.5521267652511597, 1.2353689670562744, -0.7000308036804199, -0.19174908101558685, -0.5276347398757935, -0.5734155178070068, -0.9870593547821045, -0.8504683971405029, 1.6189541816711426, 0.27643969655036926, -0.2026486098766327, 0.24452322721481323, 0.07560849189758301, 0.830217182636261, -1.2381116151809692, 0.7147378921508789, 0.8844178915023804, 1.1016989946365356, 1.3527486324310303, -0.24828673899173737, 1.1544408798217773, 0.6391609311103821, 0.9994118809700012, -0.29737481474876404, 1.0333842039108276, -0.11654537916183472, 0.5299607515335083, -1.2564862966537476, 0.8134907484054565, -0.14026162028312683, 0.4692690968513489, -0.12799882888793945, -0.8203636407852173, 0.12896369397640228, -0.3394186496734619, 0.47844916582107544, -1.2186816930770874, -1.885846734046936, -0.880088746547699, 0.9384146928787231, -0.631097674369812, 0.7643547058105469, -0.6019532680511475, -0.14159230887889862, -0.6337056159973145, 1.7277017831802368, 0.28085047006607056, 0.06387601792812347, -0.35160553455352783, -1.8340489864349365, -0.23015904426574707, -0.4261291027069092, 0.7717595100402832, 0.33644989132881165, -0.20556727051734924, 0.3921951949596405, -1.050995111465454, -0.35100680589675903, 0.6140973567962646, -0.6499900221824646, 0.7829991579055786, -0.643907368183136, 0.05000430345535278, -0.11715292930603027, -0.9475702047348022, -0.06646519899368286, 0.025011777877807617, 1.5404610633850098, 0.12534892559051514, -1.0314115285873413, 1.3578972816467285, 0.5909261107444763, -0.20365825295448303, -1.528733730316162, -0.45072752237319946, -3.0214385986328125, -1.1815062761306763, 0.7280979156494141, -0.2937036454677582, -0.6955928206443787, -0.0972406268119812, -1.1456844806671143, -0.8960440158843994, -0.12263044714927673, -0.22202570736408234, 0.1476353406906128, -0.41220033168792725, -0.4264158308506012, 0.49436771869659424, 1.3931690454483032, 2.109933614730835, 1.0722620487213135, 1.229880928993225, -0.574057400226593, -1.2937960624694824, -0.36646804213523865, 0.8713398575782776, 0.0826021134853363, -0.1715591847896576, 1.4887248277664185, 0.8595266342163086, 0.5978756546974182, 0.9408363103866577, 1.2476816177368164, 0.7140061855316162, 0.8011709451675415, 1.2015560865402222, 1.8882156610488892, 0.048174381256103516, -1.1748430728912354, -0.15089139342308044, 0.030524015426635742, -0.6425623893737793, 0.04069963097572327, -1.2324609756469727, -1.2847747802734375, -1.474350094795227, 1.1434712409973145, 2.409261703491211, -0.1359270066022873, -0.15377432107925415, 0.07198049128055573, -1.4900461435317993, -0.5195602178573608, -0.002422630786895752, -1.4023712873458862, -0.6598824858665466, 2.1565709114074707, 0.8284838199615479, -0.11609124392271042, 0.8788288235664368, 0.0012545585632324219, 1.1937075853347778, 0.5643116235733032, -0.943797767162323, 0.9048828482627869, -1.3069878816604614, -0.2222384512424469, -1.204276204109192, 0.5121830701828003, 0.4038912057876587, -0.23973453044891357, -0.7803051471710205, 1.2170426845550537, 0.7410523295402527, -1.018523931503296, 0.5776675939559937, 0.5001018643379211, 0.7832939624786377, -1.5214276313781738, -0.5978792905807495, 0.8631376028060913, 0.03460744023323059, -0.6524420380592346, -1.2363519668579102, -0.4057149887084961, -0.8032547831535339, -0.3706039488315582, -1.5969096422195435, -0.30638420581817627, 0.7752767205238342, -0.5614566802978516, -1.4110698699951172, -0.46620669960975647, -0.045537710189819336, -0.39165937900543213, -1.014875888824463, 9.34600830078125e-05, -0.5491635799407959, 0.34490516781806946, -0.16591162979602814, -0.11973948776721954, 0.8709113597869873, 0.6176050901412964, 0.620938777923584, -0.8367360234260559, 0.44186848402023315, -1.1779460906982422, 3.237527847290039, 0.25360599160194397, 0.6557571291923523, 0.20023667812347412, 0.2441927194595337, 1.5329010486602783, 1.3065330982208252, -0.2659408748149872, 0.12712842226028442, 0.0550004243850708, -0.125679612159729, 1.1314557790756226, -1.7250396013259888] 
# Shanghainese
# embedding = [-0.025817126035690308, 0.3815132677555084, -0.17395281791687012, 1.4152507781982422, 0.4637579321861267, 1.4158525466918945, 0.8975621461868286, -0.6220133304595947, -0.21335506439208984, -1.74214768409729, -0.733819842338562, -0.3172737658023834, 1.216029167175293, -0.48186397552490234, 0.364288866519928, -0.28826725482940674, 0.4739977717399597, 0.7032009363174438, 1.5031095743179321, -0.5100373029708862, -0.4271806478500366, -0.05302637815475464, 1.1853914260864258, -1.794111728668213, -1.1874452829360962, 0.1002013087272644, -0.19618500769138336, -0.5699390172958374, 0.3042028546333313, -1.6080399751663208, -0.6201008558273315, -1.0867946147918701, -0.8884466290473938, -0.49773719906806946, 0.07209669053554535, -0.27336418628692627, 0.2649349570274353, 1.5985136032104492, 0.74831622838974, -0.7212762236595154, -0.1517278552055359, 1.0764156579971313, 0.1424807608127594, 1.5939754247665405, 0.21982689201831818, -0.15628613531589508, 0.5441727638244629, -0.072346031665802, -1.1001508235931396, 0.1862766146659851, 0.6788859963417053, -0.27183011174201965, 0.02632802724838257, -0.3065498471260071, 0.8550548553466797, -0.29327499866485596, 0.01471412181854248, 0.04966330528259277, 0.5490485429763794, 0.44183483719825745, -0.9240508079528809, -0.17117205262184143, 1.2120287418365479, -1.3743200302124023, -0.1495566964149475, -0.9884849786758423, -1.192844033241272, -0.06117737293243408, -0.5873320698738098, 0.23756557703018188, -0.03661927580833435, 1.2614259719848633, -0.7794597744941711, 0.07889354228973389, -0.11617077887058258, -1.0310935974121094, 0.6977916955947876, 1.3174432516098022, -0.905498743057251, -1.2781379222869873, -0.3215392827987671, -0.05672413110733032, -0.5676383376121521, 0.33477726578712463, -0.29198119044303894, -0.8130956888198853, -0.1932140588760376, -0.13420790433883667, -0.7144180536270142, 0.7855855822563171, -0.32036489248275757, 0.04165413975715637, -0.440774142742157, -0.5701205134391785, 0.05114865303039551, -2.3079538345336914, -0.05594933032989502, -0.5537548065185547, 0.37856197357177734, 0.9741988182067871, 0.8613390326499939, -1.219160795211792, 0.722754716873169, 1.3088479042053223, 0.3468986451625824, 0.7922817468643188, -1.2467106580734253, 0.1336376965045929, -0.019274234771728516, -0.1531023383140564, 1.1110975742340088, 0.7609021067619324, 0.17311228811740875, -0.2607126235961914, 1.1893030405044556, 0.1910088211297989, -1.043961524963379, 0.003519967198371887, -0.28105583786964417, 0.18317680060863495, -0.602995753288269, -0.24838370084762573, -1.8609610795974731, -0.1364322304725647, -0.36040642857551575, 0.8557392358779907, -0.10472521185874939, -0.12084931135177612, -0.4853706359863281, 1.0870256423950195, 0.04499351978302002, 0.26764941215515137, -0.33552607893943787, -0.6337020397186279, 0.49020349979400635, 0.014645218849182129, 0.028706490993499756, -1.4878792762756348, -0.5586904883384705, 0.46046221256256104, -0.19876882433891296, -0.9993864893913269, -0.27281659841537476, -1.178427815437317, 0.3879384994506836, 1.374581217765808, -0.6129134297370911, 0.2950679361820221, -0.4108065068721771, 0.5513442158699036, -0.32461634278297424, -1.0730721950531006, -0.5824093222618103, -0.08605259656906128, 0.46103233098983765, -0.3506685793399811, -0.4878880977630615, 0.423622727394104, 0.09377439320087433, 0.3468285799026489, -0.08093735575675964, 0.1229671984910965, 0.5677791237831116, 0.004380643367767334, -0.19410955905914307, -0.9594102501869202, -0.03511980175971985, -1.606034278869629, -0.2530548870563507, -0.04350137710571289, 0.14512190222740173, 0.5341081619262695, -0.5766995549201965, -0.30577701330184937, -0.5459306836128235, 0.7675122022628784, -0.3786618411540985, 0.3310794532299042, 1.4427540302276611, 1.5684529542922974, -0.31985223293304443, 1.4201555252075195, -0.3279942274093628, -0.3766821622848511, 0.5101609826087952, 1.2891567945480347, -0.8488616347312927, -0.05834859609603882, 0.23180246353149414, 0.6927903294563293, 0.02813851833343506, -0.9774802923202515]

time_out = 30

ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append('{}/'.format(ROOT_DIR))

from config import access_key, speech_url, voice

def sse(message): 
    # sse for httpx
    from httpx_sse import connect_sse
    
    id = str(uuid.uuid4())
    file_name = f"sse-{id}.wav"
    
    with httpx.Client(timeout=httpx.Timeout(timeout=time_out)) as client:
        with connect_sse(client, "POST", speech_url, headers={
            'Authorization': f"Bearer {access_key}",
            'Accept': 'text/event-stream',
            'Content-Type': 'application/json'
        }, data=json.dumps(message)) as event_source:
            
            with open(file_name, "wb") as f:
                for sse in event_source.iter_sse():
                    data = json.loads(sse.data)
                    # inference done
                    if sse.event == "done":
                        print(f"Save to {file_name}")
                    # chunk data
                    if sse.event == "chunk":
                        f.write(base64.b64decode(data.get("data")))


def main(args):
    
    headers = {
        'Authorization': f"Bearer {access_key}",
        'Content-Type': 'application/json'
    }
    # id or embedding mode
    voice_config = { "mode": "embedding", "embedding": embedding }  if embedding else { "mode": "id", "id": "zh_female_tianmei" }
    message = {
        "model_id": "emotion-tts-v1",
        "voice": voice_config,
        "output_format": {
            "container": "wav", # one of wav, mp3 and raw
            "encoding": "pcm_s16le", # can be pcm_s16le, pcm_mulaw and pcm_alaw if container is wav or raw
            "sample_rate": sample_rate, # value is one of 8000, 16000, 22050, 24000, 32000, 44100, 48000
            # "bit_rate": 128000, # if container is mp3, uncomment bit_rate, value is one of 32000, 64000, 96000, 128000, 192000
        }, 
        "language": "zh", # support zh, en and jp
        "transcript": "你好呀，你平时喜欢看什么书，运动喜欢跑步、打球还是健身？"
    }
    
    # sse api
    if args.sse:
        return sse(message)

    # bytes api
    with httpx.Client(timeout=time_out).stream("POST", speech_url, headers=headers, data=json.dumps(message)) as res:
        # should like audio/wav;codec=pcm;rate=24000, otherwise authorization error orinput message error
        
        # 检查响应状态码
        if res.status_code != 200:
            error_text = res.read()
            print(f"Error: {error_text}")
            return
        
        # 从响应头获取文件名
        file_name = res.headers["content-disposition"].split("filename=")[1]
        
        # 写入文件
        with open(file_name, "wb") as f:
            for chunk in res.iter_raw():
                    f.write(chunk)
            print(f"Save to {file_name}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='inference with emotion tts model')
    parser.add_argument('--sse', type=bool, default=False, help='enable server side event')
    args = parser.parse_args()
    main(args)